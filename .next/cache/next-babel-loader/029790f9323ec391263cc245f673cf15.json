{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"G:\\\\React Project\\\\React Corona Dash Board\\\\components\\\\CountrySelector.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useState } from 'react';\nimport useStats from '../utils/useStats';\nimport Stats from './Stats';\nexport default function CountrySelector() {\n  var _this = this;\n\n  var _useStats = useStats('https://covid19.mathdro.id/api/countries'),\n      countries = _useStats.stats,\n      loading = _useStats.loading,\n      error = _useStats.error;\n\n  var _useState = useState('LKA'),\n      selectedCountry = _useState[0],\n      setSelectedCountry = _useState[1];\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }, \"Error...\");\n  var oldStructure = {\n    countries: {},\n    iso3: {}\n  };\n\n  var _iterator = _createForOfIteratorHelper(countries.countries),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var country = _step.value;\n      oldStructure.countries[country.name] = country.iso2;\n      oldStructure.iso3[country.iso2] = country.iso3;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Currently Showing \", selectedCountry, \" Stats\"), __jsx(\"select\", {\n    onChange: function onChange(e) {\n      setSelectedCountry(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, Object.entries(oldStructure.countries).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        country = _ref2[0],\n        code = _ref2[1];\n\n    return __jsx(\"option\", {\n      selected: selectedCountry === oldStructure.iso3[code],\n      key: code,\n      value: oldStructure.iso3[code],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, country);\n  })), __jsx(Stats, {\n    url: \"https://covid19.mathdro.id/api/countries/\".concat(selectedCountry),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["G:/React Project/React Corona Dash Board/components/CountrySelector.js"],"names":["useState","useStats","Stats","CountrySelector","countries","stats","loading","error","selectedCountry","setSelectedCountry","oldStructure","iso3","country","name","iso2","e","target","value","Object","entries","map","code"],"mappings":";;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAIA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AAAA,kBACKF,QAAQ,CACnD,0CADmD,CADb;AAAA,MACzBG,SADyB,aAChCC,KADgC;AAAA,MACdC,OADc,aACdA,OADc;AAAA,MACLC,KADK,aACLA,KADK;;AAAA,kBAIMP,QAAQ,CAAC,KAAD,CAJd;AAAA,MAIjCQ,eAJiC;AAAA,MAIhBC,kBAJgB;;AAKxC,MAAIH,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIA,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,MAAIG,YAAY,GAAG;AACjBN,IAAAA,SAAS,EAAE,EADM;AAEjBO,IAAAA,IAAI,EAAE;AAFW,GAAnB;;AATwC,6CAcpBP,SAAS,CAACA,SAdU;AAAA;;AAAA;AAcxC,wDAAyC;AAAA,UAAhCQ,OAAgC;AACvCF,MAAAA,YAAY,CAACN,SAAb,CAAuBQ,OAAO,CAACC,IAA/B,IAAuCD,OAAO,CAACE,IAA/C;AACAJ,MAAAA,YAAY,CAACC,IAAb,CAAkBC,OAAO,CAACE,IAA1B,IAAkCF,OAAO,CAACD,IAA1C;AACD;AAjBuC;AAAA;AAAA;AAAA;AAAA;;AAmBxC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuBH,eAAvB,WADF,EAGE;AACE,IAAA,QAAQ,EAAE,kBAAAO,CAAC,EAAI;AACbN,MAAAA,kBAAkB,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGC,MAAM,CAACC,OAAP,CAAeT,YAAY,CAACN,SAA5B,EAAuCgB,GAAvC,CAA2C;AAAA;AAAA,QAAER,OAAF;AAAA,QAAWS,IAAX;;AAAA,WAC1C;AACE,MAAA,QAAQ,EAAEb,eAAe,KAAKE,YAAY,CAACC,IAAb,CAAkBU,IAAlB,CADhC;AAEE,MAAA,GAAG,EAAEA,IAFP;AAGE,MAAA,KAAK,EAAEX,YAAY,CAACC,IAAb,CAAkBU,IAAlB,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGT,OALH,CAD0C;AAAA,GAA3C,CALH,CAHF,EAkBE,MAAC,KAAD;AACE,IAAA,GAAG,qDAA8CJ,eAA9C,CADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,CADF;AAwBD","sourcesContent":["import { useState } from 'react';\r\nimport useStats from '../utils/useStats';\r\nimport Stats from './Stats';\r\n\r\n\r\n\r\nexport default function CountrySelector() {\r\n  const { stats: countries, loading, error } = useStats(\r\n    'https://covid19.mathdro.id/api/countries'\r\n  );\r\n  const [selectedCountry, setSelectedCountry] = useState('LKA');\r\n  if (loading) return <p>Loading...</p>;\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error...</p>;\r\n\r\n  let oldStructure = {\r\n    countries: {},\r\n    iso3: {}\r\n    };\r\n\r\n  for (let country of countries.countries) {\r\n    oldStructure.countries[country.name] = country.iso2;\r\n    oldStructure.iso3[country.iso2] = country.iso3;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Currently Showing {selectedCountry} Stats</h2>\r\n    \r\n      <select\r\n        onChange={e => {\r\n          setSelectedCountry(e.target.value);\r\n        }}\r\n      >\r\n        {Object.entries(oldStructure.countries).map(([country, code]) => (\r\n          <option\r\n            selected={selectedCountry === oldStructure.iso3[code]}\r\n            key={code}\r\n            value={oldStructure.iso3[code]}\r\n          >\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <Stats\r\n        url={`https://covid19.mathdro.id/api/countries/${selectedCountry}`}\r\n      ></Stats>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}